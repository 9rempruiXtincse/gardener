// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/extensions/pkg/webhook/controlplane (interfaces: KubeletConfigCodec)

// Package controlplane is a generated GoMock package.
package controlplane

import (
	reflect "reflect"

	v1alpha1 "github.com/gardener/gardener/pkg/apis/extensions/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	v1beta1 "k8s.io/kubelet/config/v1beta1"
)

// MockKubeletConfigCodec is a mock of KubeletConfigCodec interface.
type MockKubeletConfigCodec struct {
	ctrl     *gomock.Controller
	recorder *MockKubeletConfigCodecMockRecorder
}

// MockKubeletConfigCodecMockRecorder is the mock recorder for MockKubeletConfigCodec.
type MockKubeletConfigCodecMockRecorder struct {
	mock *MockKubeletConfigCodec
}

// NewMockKubeletConfigCodec creates a new mock instance.
func NewMockKubeletConfigCodec(ctrl *gomock.Controller) *MockKubeletConfigCodec {
	mock := &MockKubeletConfigCodec{ctrl: ctrl}
	mock.recorder = &MockKubeletConfigCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeletConfigCodec) EXPECT() *MockKubeletConfigCodecMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockKubeletConfigCodec) Decode(arg0 *v1alpha1.FileContentInline) (*v1beta1.KubeletConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(*v1beta1.KubeletConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockKubeletConfigCodecMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockKubeletConfigCodec)(nil).Decode), arg0)
}

// Encode mocks base method.
func (m *MockKubeletConfigCodec) Encode(arg0 *v1beta1.KubeletConfiguration, arg1 string) (*v1alpha1.FileContentInline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.FileContentInline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockKubeletConfigCodecMockRecorder) Encode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockKubeletConfigCodec)(nil).Encode), arg0, arg1)
}
